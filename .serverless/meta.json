{
  "/Users/minhyeok/Desktop/LostarkTodo/nestjs/boards": {
    "versionSfCore": null,
    "versionFramework": "4.4.4",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "default-aws-credential-resolver": "<REDACTED>"
    },
    "composeServiceName": null,
    "servicePath": "/Users/minhyeok/Desktop/LostarkTodo/nestjs/boards",
    "serviceConfigFileName": "serverless.yaml",
    "service": {
      "service": "Loatodo-Boards",
      "plugins": [
        "serverless-offline"
      ],
      "provider": {
        "name": "aws",
        "region": "ap-northeast-2",
        "runtime": "nodejs18.x",
        "stage": "prod",
        "environment": {
          "NODE_ENV": "production"
        },
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ApiLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/Loatodo-Boards-prod-api"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "Loatodo-Boards",
                          "prod",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Loatodo-Boards-prod*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Loatodo-Boards-prod*:*:*"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "Loatodo-Boards",
                      "prod",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "ApiLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-northeast-2-b20fea30-80e4",
                  "S3Key": "serverless/Loatodo-Boards/prod/1728221280151-2024-10-06T13:28:00.151Z/Loatodo-Boards.zip"
                },
                "Handler": "dist/lambda.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "Loatodo-Boards-prod-api",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "NODE_ENV": "production"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ApiLogGroup"
              ]
            },
            "ApiLambdaVersionUFpo9gDrUfBBneMq53aHCKjMXiMQ2Az9uHzVgjvQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ApiLambdaFunction"
                },
                "CodeSha256": "Hx5yy+DlmqOOGt1NxPO3vZ+zva/LGonvk2A1HYeSIcA="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "prod-Loatodo-Boards",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceProxyVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "{proxy+}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceApiDashdocs": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "api-docs",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodApiDashdocsOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceApiDashdocs"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodProxyVarAny": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "ANY",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceProxyVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "ApiLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "ApiLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodApiDashdocsGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceApiDashdocs"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "ApiLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "ApiLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1728221273883": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "prod"
              },
              "DependsOn": [
                "ApiGatewayMethodApiDashdocsOptions",
                "ApiGatewayMethodProxyVarAny",
                "ApiGatewayMethodApiDashdocsGet"
              ]
            },
            "ApiLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ApiLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-ap-northeast-2-b20fea30-80e4",
              "Export": {
                "Name": "sls-Loatodo-Boards-prod-ServerlessDeploymentBucketName"
              }
            },
            "ApiLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ApiLambdaVersionUFpo9gDrUfBBneMq53aHCKjMXiMQ2Az9uHzVgjvQ"
              },
              "Export": {
                "Name": "sls-Loatodo-Boards-prod-ApiLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/prod"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-Loatodo-Boards-prod-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "api": {
          "handler": "dist/lambda.handler",
          "events": [
            {
              "http": {
                "method": "any",
                "path": "{proxy+}",
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "method": "get",
                "path": "api-docs",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "package": {
            "exclude": [
              "node_modules/**",
              "src/**",
              "tests/**",
              ".git/**",
              ".gitignore",
              "serverless.yaml",
              "README.md",
              "package.json",
              "package-lock.json"
            ]
          },
          "name": "Loatodo-Boards-prod-api",
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "ApiLambdaVersionUFpo9gDrUfBBneMq53aHCKjMXiMQ2Az9uHzVgjvQ"
        }
      },
      "custom": {
        "optimize": {
          "external": [
            "swagger-ui-dist"
          ]
        }
      }
    },
    "serviceRawFile": "service: Loatodo-Boards\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  region: ap-northeast-2\n  runtime: nodejs18.x\n  stage: prod\n  environment:\n    NODE_ENV: production\n\nfunctions:\n  api:\n    handler: dist/lambda.handler\n    events:\n      - http:\n          method: any\n          path: /{proxy+}\n      - http:\n          method: get\n          path: /api-docs\n          cors: true\n    package:\n      exclude:\n        - node_modules/**\n        - src/**\n        - tests/**\n        - .git/**\n        - .gitignore\n        - serverless.yaml\n        - README.md\n        - package.json\n        - package-lock.json\n\ncustom:\n  optimize:\n    external: ['swagger-ui-dist']\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "error": {
      "message": "An error occurred: ApiLambdaFunction - Resource handler returned message: \"Unzipped size must be smaller than 262144000 bytes (Service: Lambda, Status Code: 400, Request ID: 385fbf68-6a5a-43a1-990d-d215d5863415)\" (RequestToken: 93930b18-5e11-286a-56a7-a5ceba33eb5e, HandlerErrorCode: InvalidRequest).",
      "stack": "ServerlessError2: An error occurred: ApiLambdaFunction - Resource handler returned message: \"Unzipped size must be smaller than 262144000 bytes (Service: Lambda, Status Code: 400, Request ID: 385fbf68-6a5a-43a1-990d-d215d5863415)\" (RequestToken: 93930b18-5e11-286a-56a7-a5ceba33eb5e, HandlerErrorCode: InvalidRequest).\n    at file:///Users/minhyeok/.serverless/releases/4.4.4/package/dist/sf-core.js:717:832\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async AwsDeploy.update (file:///Users/minhyeok/.serverless/releases/4.4.4/package/dist/sf-core.js:717:25367)\n    at async aws:deploy:deploy:updateStack (file:///Users/minhyeok/.serverless/releases/4.4.4/package/dist/sf-core.js:728:5729)\n    at async PluginManager.runHooks (file:///Users/minhyeok/.serverless/releases/4.4.4/package/dist/sf-core.js:915:9311)\n    at async PluginManager.invoke (file:///Users/minhyeok/.serverless/releases/4.4.4/package/dist/sf-core.js:915:10082)\n    at async PluginManager.spawn (file:///Users/minhyeok/.serverless/releases/4.4.4/package/dist/sf-core.js:915:10443)\n    at async PluginManager.runHooks (file:///Users/minhyeok/.serverless/releases/4.4.4/package/dist/sf-core.js:915:9311)\n    at async PluginManager.invoke (file:///Users/minhyeok/.serverless/releases/4.4.4/package/dist/sf-core.js:915:10082)\n    at async PluginManager.run (file:///Users/minhyeok/.serverless/releases/4.4.4/package/dist/sf-core.js:915:10813)",
      "code": "AWS_CLOUD_FORMATION_UPDATE_STACK_INTERNAL_LAMBDA_FUNCTION_UPDATE_FAILED"
    },
    "params": {},
    "machineId": "1e1d00c5962014e2dd6aa6fe4e56d3e5",
    "stage": "prod",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "fab68d94-8c1d-4f32-b1a2-1c7524d3616d",
    "orgName": "loatodo",
    "userId": "dhzPr4dbJGDYWsr0Gt",
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "loatodo",
    "subscription": null,
    "userEmail": "repeat2487@gmail.com",
    "serviceProviderAwsRegion": "ap-northeast-2",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "173796993047",
    "projectType": "traditional",
    "versionSf": "4.4.4",
    "serviceProviderAwsCfStackName": "Loatodo-Boards-prod",
    "serviceUniqueId": "arn:aws:cloudformation:ap-northeast-2:173796993047:stack/Loatodo-Boards-prod/8820f940-831c-11ef-800c-02216f137587",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:ap-northeast-2:173796993047:stack/Loatodo-Boards-prod/8820f940-831c-11ef-800c-02216f137587",
    "serviceProviderAwsCfStackCreated": "2024-10-05T13:20:03.901Z",
    "serviceProviderAwsCfStackUpdated": "2024-10-06T13:28:09.992Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_ROLLBACK_IN_PROGRESS",
    "serviceProviderAwsCfStackOutputs": null
  }
}